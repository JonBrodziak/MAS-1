plot_data_id <- which(names(om_list) %in% c("biomass", "abundance", "ssb", "recruit", "Ftot", "fratio", "ssbratio"))
plot_data <- as.data.frame(matrix(NA, ncol=4, nrow=length(plot_data_id)))
colnames(plot_data) <- c("AMAK", "ASAP", "BAM", "MAS")
rownames(plot_data) <- c("Biomass (last year)", "Abundance (last year)", "SSB (last year)", "Recruit (last year)", "F (last year)", "Fratio (last year)", "SSBratio (last year)")
for (i in 1:length(plot_data_id)){
jpeg(file=file.path(maindir, subdir, paste(rownames(plot_data)[i], ".jpg", sep="")), width=150, height=120, units="mm", res=300)
boxplot(amak_list[[plot_data_id[i]]][par.sim1$nyr,], asap_list[[plot_data_id[i]]][par.sim1$nyr,], bam_list[[plot_data_id[i]]][par.sim1$nyr,], mas_list[[plot_data_id[i]]][par.sim1$nyr,], col=col, axes=F, ylab=rownames(plot_data)[i], pch=16)
box()
axis(1, at=1:4, labels = c("AMAK", "ASAP", "BAM", "MAS"))
axis(2)
abline(h=om_list[[plot_data_id[i]]][par.sim1$nyr,], col="gray70", lty=2)
dev.off()
}
#### Plot survey and landings with error as true values ####
plot_data_id <- which(names(om_list) %in% c("landing", "survey"))
title = c("Landings", "Survey Index")
legend = c("AMAK", "ASAP", "BAM", "MAS")
for (i in 1:length(plot_data_id)){
jpeg(file=file.path(maindir, subdir, paste(title[i], "_with_observation_error.jpg", sep="")), width=200, height=120, units="mm", res=300)
par(mar=c(0.7, 4, 0.2, 0.2), mfrow=c(2,2), oma = c(4, 4, 0.2, 0.2))
temp_list <- list(amak_list[[plot_data_id[i]]], asap_list[[plot_data_id[i]]], bam_list[[plot_data_id[i]]], mas_list[[plot_data_id[i]]])
ylim=range(om_list[[plot_data_id[i]+8]], unlist(temp_list))
for(k in 1:length(temp_list)){
plot(om_list[[plot_data_id[i]+8]][,1], type="l", col=alpha("deepskyblue", 0.2), axes=F, xlab="", ylab=title[i], panel.first=grid(lty=1), ylim=ylim)
sapply(1:om_sim_num, function(x) lines(temp_list[[k]][,x], col=alpha("gray10", 0.7)))
sapply(1:om_sim_num, function(x) lines(om_list[[plot_data_id[i]+8]][,x], col=alpha("deepskyblue", 0.2), type="l", pch=19, cex=0.5))
#lines(om_list[[plot_data_id[i]+8]][,1], type="o", col="blue", pch=19, cex=0.5)
box()
axis(side=1, at=seq(5, par.sim1$nyr, by=5), labels=F)
axis(2)
if(k %in% c(3,4)){
axis(side=1, at=seq(5, par.sim1$nyr, by=5), labels = sim1$yr[seq(5, par.sim1$nyr, by=5)])
mtext("Year", side=1, line=2)
}
legend("topleft", legend=legend[k], bty="n")
}
dev.off()
}
#### Plot true value and estimations over time ####
plot_data_id <- which(names(om_list) %in% c("biomass", "abundance", "ssb", "recruit" , "Ftot","landing","survey", "fratio", "ssbratio"))
title = c("Biomass", "Abundance", "SSB", "Recruitment", "F", "Landings", "Survey Index", "Fratio", "SSBratio")
legend = c("AMAK", "ASAP", "BAM", "MAS")
for (i in 1:length(plot_data_id)){
jpeg(file=file.path(maindir, subdir, paste(title[i], "_estimation_over_time_sim.jpg", sep="")), width=200, height=120, units="mm", res=300)
par(mar=c(0.7, 4, 0.2, 0.2), mfrow=c(2,2), oma = c(4, 4, 0.2, 0.2))
temp_list <- list(amak_list[[plot_data_id[i]]], asap_list[[plot_data_id[i]]], bam_list[[plot_data_id[i]]], mas_list[[plot_data_id[i]]])
ylim=range(om_list[[plot_data_id[i]]], unlist(temp_list))
for(k in 1:length(temp_list)){
plot(om_list[[plot_data_id[i]]][,1], type="l", col=alpha("deepskyblue", 0.2), axes=F, xlab="", ylab=title[i], panel.first=grid(lty=1), ylim=ylim)
sapply(1:om_sim_num, function(x) lines(temp_list[[k]][,x], col=alpha("gray10", 0.7)))
sapply(1:om_sim_num, function(x) lines(om_list[[plot_data_id[i]]][,x], col=alpha("deepskyblue", 0.2), type="l", pch=19, cex=0.5))
#lines(om_list[[plot_data_id[i]]][,1], type="o", col="blue", pch=19, cex=0.5)
box()
axis(side=1, at=seq(5, par.sim1$nyr, by=5), labels=F)
axis(2)
if(k %in% c(3,4)){
axis(side=1, at=seq(5, par.sim1$nyr, by=5), labels = sim1$yr[seq(5, par.sim1$nyr, by=5)])
mtext("Year", side=1, line=2)
}
legend("topleft", legend=legend[k], bty="n")
}
dev.off()
}
subdir = "Figures"
ylab = c("Biomass (mt)", "Abundance (1000 fish)", "SSB (mt)", "Recruitment (1000 fish)", "F", "Landings (mt)", "Survey Index (scaled)")
xlab = rep("Year", times=length(ylab))
plot_data_id <- 1:length(ylab)
col= c("black", "orange", "green", "red", "deepskyblue3")
nrow=2
ncol=4
for (j in figure_id){
jpeg(file=file.path(maindir, subdir, paste("Fig", j, "_true_estimate_timeseries.jpg", sep="")), width=205, height=75, units="mm", res=300)
par(mar=c(0.7, 4, 0.2, 0.2), mfrow=c(nrow,ncol), oma = c(4, 4, 0.2, 0.2))
for(i in 1:length(plot_data_id)){
ylim=range(om_list[[plot_data_id[i]]][,j], amak_list[[plot_data_id[i]]][,j], asap_list[[plot_data_id[i]]][,j], bam_list[[plot_data_id[i]]][,j], mas_list[[plot_data_id[i]]][,j])
plot(sim1$yr, om_list[[plot_data_id[i]]][,j], pch=19, col=col[1], cex=0.7, ylim=ylim, axes=F, xlab="", ylab="")
lines(sim1$yr, amak_list[[plot_data_id[i]]][,j], typ="l", col=col[2], lwd=1.5)
lines(sim1$yr, asap_list[[plot_data_id[i]]][,j], typ="l", col=col[3], lwd=1.5)
lines(sim1$yr, bam_list[[plot_data_id[i]]][,j], typ="l", col=col[4], lwd=1.5)
lines(sim1$yr, mas_list[[plot_data_id[i]]][,j], typ="l", col=col[5], lwd=1.5)
if(i < ncol) axis(1, labels = F)
else {
axis(1)
mtext(side=1, text=xlab, line=2, cex=0.6, font=2, col="blue")
}
mtext(side=2, text=ylab[i], line=3.1, cex=0.6, font=2, col="blue")
axis(2, las=2)
box()
}
plot.new()
legend("bottom", c("OM", "AMAK", "ASAP", "BAM", "MAS"), pch=c(19, NA, NA, NA, NA), lty=c(NA,1,1,1,1), lwd=c(NA, 1.5, 1.5, 1.5, 1,5), col=col, bty="n", cex=0.8)
dev.off()
}
ylim=range(om_list[[plot_data_id[i]]][,j], amak_list[[plot_data_id[i]]][,j], asap_list[[plot_data_id[i]]][,j], bam_list[[plot_data_id[i]]][,j])
ylim=range(om_list[[plot_data_id[i]]][,j], amak_list[[plot_data_id[i]]][,j], asap_list[[plot_data_id[i]]][,j], bam_list[[plot_data_id[i]]][,j])
for(i in 1:length(plot_data_id)){
ylim=range(om_list[[plot_data_id[i]]][,j], amak_list[[plot_data_id[i]]][,j], asap_list[[plot_data_id[i]]][,j], bam_list[[plot_data_id[i]]][,j],, mas_list[[plot_data_id[i]]][,j])
}
print(ylim)
for(i in 1:length(plot_data_id)){
ylim=range(om_list[[plot_data_id[i]]][,j], amak_list[[plot_data_id[i]]][,j], asap_list[[plot_data_id[i]]][,j], bam_list[[plot_data_id[i]]][,j])
}
print(ylim)
for (j in figure_id){
jpeg(file=file.path(maindir, subdir, paste("Fig", j, "_true_estimate_timeseries.jpg", sep="")), width=205, height=75, units="mm", res=300)
par(mar=c(0.7, 4, 0.2, 0.2), mfrow=c(nrow,ncol), oma = c(4, 4, 0.2, 0.2))
for(i in 1:length(plot_data_id)){
ylim=range(om_list[[plot_data_id[i]]][,j], amak_list[[plot_data_id[i]]][,j], asap_list[[plot_data_id[i]]][,j], bam_list[[plot_data_id[i]]][,j],, mas_list[[plot_data_id[i]]][,j])
print(ylim)
plot(sim1$yr, om_list[[plot_data_id[i]]][,j], pch=19, col=col[1], cex=0.7,  axes=F, xlab="", ylab="")
lines(sim1$yr, amak_list[[plot_data_id[i]]][,j], typ="l", col=col[2], lwd=1.5)
lines(sim1$yr, asap_list[[plot_data_id[i]]][,j], typ="l", col=col[3], lwd=1.5)
lines(sim1$yr, bam_list[[plot_data_id[i]]][,j], typ="l", col=col[4], lwd=1.5)
lines(sim1$yr, mas_list[[plot_data_id[i]]][,j], typ="l", col=col[5], lwd=1.5)
if(i < ncol) axis(1, labels = F)
else {
axis(1)
mtext(side=1, text=xlab, line=2, cex=0.6, font=2, col="blue")
}
mtext(side=2, text=ylab[i], line=3.1, cex=0.6, font=2, col="blue")
axis(2, las=2)
box()
}
plot.new()
legend("bottom", c("OM", "AMAK", "ASAP", "BAM", "MAS"), pch=c(19, NA, NA, NA, NA), lty=c(NA,1,1,1,1), lwd=c(NA, 1.5, 1.5, 1.5, 1,5), col=col, bty="n", cex=0.8)
dev.off()
}
for (j in figure_id){
jpeg(file=file.path(maindir, subdir, paste("Fig", j, "_true_estimate_timeseries.jpg", sep="")), width=205, height=75, units="mm", res=300)
par(mar=c(0.7, 4, 0.2, 0.2), mfrow=c(nrow,ncol), oma = c(4, 4, 0.2, 0.2))
for(i in 1:length(plot_data_id)){
ylim=range(om_list[[plot_data_id[i]]][,j], amak_list[[plot_data_id[i]]][,j], asap_list[[plot_data_id[i]]][,j], bam_list[[plot_data_id[i]]][,j], mas_list[[plot_data_id[i]]][,j])
print(ylim)
plot(sim1$yr, om_list[[plot_data_id[i]]][,j], pch=19, col=col[1], cex=0.7,  axes=F, xlab="", ylab="")
lines(sim1$yr, amak_list[[plot_data_id[i]]][,j], typ="l", col=col[2], lwd=1.5)
lines(sim1$yr, asap_list[[plot_data_id[i]]][,j], typ="l", col=col[3], lwd=1.5)
lines(sim1$yr, bam_list[[plot_data_id[i]]][,j], typ="l", col=col[4], lwd=1.5)
lines(sim1$yr, mas_list[[plot_data_id[i]]][,j], typ="l", col=col[5], lwd=1.5)
if(i < ncol) axis(1, labels = F)
else {
axis(1)
mtext(side=1, text=xlab, line=2, cex=0.6, font=2, col="blue")
}
mtext(side=2, text=ylab[i], line=3.1, cex=0.6, font=2, col="blue")
axis(2, las=2)
box()
}
plot.new()
legend("bottom", c("OM", "AMAK", "ASAP", "BAM", "MAS"), pch=c(19, NA, NA, NA, NA), lty=c(NA,1,1,1,1), lwd=c(NA, 1.5, 1.5, 1.5, 1,5), col=col, bty="n", cex=0.8)
dev.off()
}
for(i in 1:length(plot_data_id)){
ylim=range(om_list[[plot_data_id[i]]][,j], amak_list[[plot_data_id[i]]][,j], asap_list[[plot_data_id[i]]][,j], bam_list[[plot_data_id[i]]][,j])
}
print(ylim)
for(i in 1:length(plot_data_id)){
ylim=range(om_list[[plot_data_id[i]]][,j], amak_list[[plot_data_id[i]]][,j], asap_list[[plot_data_id[i]]][,j])
}
print(ylim)
for(i in 1:length(plot_data_id)){
ylim=range(om_list[[plot_data_id[i]]][,j], amak_list[[plot_data_id[i]]][,j])
}
print(ylim)
for(i in 1:length(plot_data_id)){
ylim=range(om_list[[plot_data_id[i]]][,j])
}
print(ylim)
for(i in 1:length(plot_data_id)){
ylim=range( amak_list[[plot_data_id[i]]][,j], asap_list[[plot_data_id[i]]][,j], bam_list[[plot_data_id[i]]][,j], mas_list[[plot_data_id[i]]][,j])
}
print(length(plot_data_id))
for(i in 1:length(plot_data_id)){
ylim=range(om_list[[plot_data_id[i]]][,j], asap_list[[plot_data_id[i]]][,j], bam_list[[plot_data_id[i]]][,j], mas_list[[plot_data_id[i]]][,j])
}
for(i in 1:length(plot_data_id)){
ylim=range(om_list[[plot_data_id[i]]][,j], amak_list[[plot_data_id[i]]][,j], asap_list[[plot_data_id[i]]][,j], bam_list[[plot_data_id[i]]][,j], mas_list[[plot_data_id[i]]][,j],finite = TRUE)
}
for(i in 1:length(plot_data_id)){
ylim=range(om_list[[plot_data_id[i]]][,j], amak_list[[plot_data_id[i]]][,j], asap_list[[plot_data_id[i]]][,j], bam_list[[plot_data_id[i]]][,j],finite = TRUE)
}
for(i in 1:length(plot_data_id)){
print(amak_list[[plot_data_id[i]]][,j])
}
for(i in 1:length(plot_data_id)){
print(mas_list[[plot_data_id[i]]][,j])
}
setwd("/Users/mattadmin/NetBeansProjects/mas/Tests/ModelComparisonProject/Stock-Assessment-Model-Comparison-Project")
#### Check and install missing packages and library all packages ####
list_of_packages <- c("rstudioapi", "gdata", "PBSadmb", "stringr", "matrixcalc", "r4ss", "ASAPplots", "future", "readxl", "scales", "corrplot", "future", "glue", "jsonlite")
missing_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(missing_packages)) install.packages(missing_packages)
invisible(lapply(list_of_packages, library, character.only = TRUE))
current_path <- getActiveDocumentContext()$path
maindir <- dirname(current_path)
setwd(maindir)
folder_names <- c("OM", "AMAK", "ASAP", "BAM", "MAS", "Figures", "Outputs")
om_sim_num <- 160
keep_sim_num <- 100
load(file.path(maindir, "seed_num.RData"))
seed_num <- seed_num[1:om_sim_num]
input.cv.L=0.01
input.cv.survey=0.2
cv.L=0.005
cv.survey=0.1
n.L=200
n.survey=200
logR.sd=0.2
nyr=30
#### Create main folders ####
sapply(folder_names, function(x) {
if (!file.exists(file.path(maindir, x))) dir.create(file.path(maindir, x))
})
#### Run Read_Write_Inputs_Fun ####
subdir = "Read_Write_Inputs_Fun"
setwd(file.path(maindir, subdir))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd(file.path(maindir, subdir, "r4ss"))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
#### Check convergence of iterations ####
if (T){
positive_hessian = matrix(NA, ncol=4, nrow=om_sim_num)
gradient_0.0001 = matrix(NA, ncol=4, nrow=om_sim_num)
gradient_0.001 = matrix(NA, ncol=4, nrow=om_sim_num)
gradient_0.01 = matrix(NA, ncol=4, nrow=om_sim_num)
gradient = matrix(NA, ncol=4, nrow=om_sim_num)
convergence_measures <- list(positive_hessian=positive_hessian, gradient_0.0001=gradient_0.0001, gradient_0.001=gradient_0.0001, gradient_0.01=gradient_0.0001, gradient=gradient)
for (om_sim in 1:om_sim_num){
subdir="AMAK"
setwd(file.path(maindir, subdir, paste("s", om_sim, sep="")))
temp <- getADMBHessian(File=file.path(maindir, subdir, paste("s", om_sim, sep="")), FileName="admodel.hes")$hes
convergence_measures$positive_hessian[om_sim, 1] <- ifelse(is.positive.definite((temp+t(temp))/2), 1, 0)
temp <- as.numeric(scan("amak.par", what='', n=16, quiet=TRUE)[c(6,11,16)])[3]
convergence_measures$gradient_0.0001[om_sim, 1]<- ifelse(temp>0.0001, 0, 1)
convergence_measures$gradient_0.001[om_sim, 1]<- ifelse(temp>0.001, 0, 1)
convergence_measures$gradient_0.01[om_sim, 1]<- ifelse(temp>0.01, 0, 1)
convergence_measures$gradient[om_sim, 1]<- temp
subdir="ASAP"
setwd(file.path(maindir, subdir, paste("s", om_sim, sep="")))
temp <- getADMBHessian(File=file.path(maindir, subdir, paste("s", om_sim, sep="")), FileName="admodel.hes")$hes
convergence_measures$positive_hessian[om_sim, 2] <- ifelse(is.positive.definite((temp+t(temp))/2), 1, 0)
temp <- as.numeric(scan("asap3.par", what='', n=16, quiet=TRUE)[c(6,11,16)])[3]
convergence_measures$gradient_0.0001[om_sim, 2]<- ifelse(temp>0.0001, 0, 1)
convergence_measures$gradient_0.001[om_sim, 2]<- ifelse(temp>0.001, 0, 1)
convergence_measures$gradient_0.01[om_sim, 2]<- ifelse(temp>0.01, 0, 1)
convergence_measures$gradient[om_sim, 2]<- temp
subdir="BAM"
setwd(file.path(maindir, subdir, paste("s", om_sim, sep="")))
temp <- getADMBHessian(File=file.path(maindir, subdir, paste("s", om_sim, sep="")), FileName="admodel.hes")$hes
convergence_measures$positive_hessian[om_sim, 3] <- ifelse(is.positive.definite((temp+t(temp))/2), 1, 0)
temp <- as.numeric(scan("bam-sim.par", what='', n=16, quiet=TRUE)[c(6,11,16)])[3]
convergence_measures$gradient_0.0001[om_sim, 3]<- ifelse(temp>0.0001, 0, 1)
convergence_measures$gradient_0.001[om_sim, 3]<- ifelse(temp>0.001, 0, 1)
convergence_measures$gradient_0.01[om_sim, 3]<- ifelse(temp>0.01, 0, 1)
convergence_measures$gradient[om_sim, 3]<- temp
subdir="BAM"
setwd(file.path(maindir, subdir, paste("s", om_sim, sep="")))
temp <- getADMBHessian(File=file.path(maindir, subdir, paste("s", om_sim, sep="")), FileName="admodel.hes")$hes #Hessian matrix
convergence_measures$positive_hessian[om_sim, 4] <- ifelse(is.positive.definite((temp+t(temp))/2), 1, 0)
temp <- as.numeric(scan("bam-sim.par", what='', n=16, quiet=TRUE)[c(6,11,16)])[3] #gradient value
convergence_measures$gradient_0.0001[om_sim, 4]<- ifelse(temp>0.0001, 0, 1)
convergence_measures$gradient_0.001[om_sim, 4]<- ifelse(temp>0.001, 0, 1)
convergence_measures$gradient_0.01[om_sim, 4]<- ifelse(temp>0.01, 0, 1)
convergence_measures$gradient[om_sim, 4]<- temp
}
save(convergence_measures, file=file.path(maindir, "Outputs", "convergence_measures.RData"))
load(file.path(maindir, "Outputs", "convergence_measures.RData"))
not_positive_hessian <- unique(unlist(sapply(1:ncol(convergence_measures$positive_hessian), function(x) which(convergence_measures$positive_hessian[,x]==0))))
write.csv(not_positive_hessian, file=file.path(maindir, "Outputs", "Not_positive_hessian.csv"))
col= c("black", "orange", "green", "red", "deepskyblue3")
if(max(convergence_measures$gradient)<0.1){
jpeg(file=file.path(maindir, "Figures", "Gradient.jpg"), width=170, height=150, units="mm", res=300)
par(mfrow=c(2,2), mar=c(4,4,1,1))
xlim = c(0, max(convergence_measures$gradient))
bins <- seq(0, max(convergence_measures$gradient)*1.05, by=0.0005)
hist(convergence_measures$gradient[,1], xlim=xlim, xlab = "Gradient", main="", col=col[2], breaks = bins)
legend("topright", "AMAK", bty="n")
box()
hist(convergence_measures$gradient[,2], xlim=xlim, xlab = "Gradient", main="", breaks = bins, col=col[3])
legend("topright", "ASAP", bty="n")
box()
hist(convergence_measures$gradient[,3], xlim=xlim, xlab = "Gradient", main="", breaks = bins, col=col[4])
legend("topright", "BAM", bty="n")
box()
hist(convergence_measures$gradient[,4], xlim=xlim, xlab = "Gradient", main="", breaks = bins, col=col[5])
legend("topright", "MAS", bty="n")
box()
dev.off()
}
good_gradient_percentage <- matrix(NA, nrow=1, ncol=4)
good_gradient_percentage[,1] <- length(which(convergence_measures$gradient[,1]<=0.001))/om_sim_num*100
good_gradient_percentage[,2] <- length(which(convergence_measures$gradient[,2]<=0.001))/om_sim_num*100
good_gradient_percentage[,3] <- length(which(convergence_measures$gradient[,3]<=0.001))/om_sim_num*100
good_gradient_percentage[,4] <- length(which(convergence_measures$gradient[,4]<=0.001))/om_sim_num*100
colnames(good_gradient_percentage) <- c("AMAK", "ASAP", "BAM", "MAS")
rownames(good_gradient_percentage) <- "Percentage"
write.csv(good_gradient_percentage, file=file.path(maindir, "Outputs", "good_gradient_ratio.csv"))
keep_sim_id <- c(1:om_sim_num)[-unique(c(which(convergence_measures$gradient[,1] %in% boxplot.stats(convergence_measures$gradient[,1])$out), which(convergence_measures$gradient[,2] %in% boxplot.stats(convergence_measures$gradient[,2])$out), which(convergence_measures$gradient[,3] %in% boxplot.stats(convergence_measures$gradient[,3])$out), which(convergence_measures$gradient[,4] %in% boxplot.stats(convergence_measures$gradient[,4])$out), unique(unlist(sapply(1:ncol(convergence_measures$positive_hessian), function(x) which(convergence_measures$positive_hessian[,x]==0))))))][1:keep_sim_num]
om_sim_num <- length(keep_sim_id)
}
#### Plot functions ####
library(scales)
model_names = c("OM", "AMAK", "ASAP", "BAM", "MAS")
figure_number <- 10
if(om_sim_num <= figure_number) {
figure_id <- 1:om_sim_num
} else{
figure_id <- seq(1, om_sim_num, by=round((om_sim_num-1)/(figure_number-1)))
}
real_figure_id <- keep_sim_id[figure_id]
write.csv(real_figure_id, file=file.path(maindir, "Outputs", "Real_Figure_ID.csv"))
timeseries_line_plot <- function(time, ydata, xlab, ylab){
x_data <- time
xlim <- range(time)
y_data <- ydata
ylim <- range(y_data)
median_y <- apply(y_data, 1, median)
plot(1, type="n", xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, panel.first=grid(lty=1))
sapply(1:om_sim_num, function(x) lines(x_data, y_data[, x], type="l", lty=1, col="gray70"))
lines(x_data, median_y, type="o", pch=19, lty=1, col="deepskyblue3", cex=0.5)
}
timeseries_residuals_plot <- function(time, om_data, est_data, xlab, ylab, legend, type){
## time = years
## om_data = output data from operating model
## est_data = output data from assessment model
## xlab = x labels
## ylab = y labels
## legend = title of each subfigure
## type = "line" or "bar" or "boxplot"
x_data <- time
xlim <- range(time)
y0_data <- om_data
y1_data <- est_data
#residual_data <- (y1_data - y0_data)
residual_data <- (y1_data - y0_data)/y0_data
#ylim <- range (residual_data)
ylim <- c(-0.2, 0.4)
median_y <- apply(residual_data, 1, median)
if(type=="line") {
temp<-plot(1, type="n", xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim)
sapply(1:om_sim_num, function(x) lines(x_data, residual_data[, x], type="l", lty=1, col="gray70"))
abline(h=0, lty=2)
lines(x_data, median_y, type="o", pch=19, lty=1, col="deepskyblue3", cex=0.5)
legend("topright", legend, bty="n")
}
if(type=="bar") {
tmp <- barplot(median_y, xlab=xlab, ylab=ylab, col="gray70")
box()
axis(1, at=tmp, labels=x_data)
legend("topleft", legend, bty="n")
}
if(type=="boxplot") {
boxplot(t(residual_data), xlab=xlab, ylab=ylab, col="gray90", notch=F, staplelwd = 1, pch=19, cex=0.5)
abline(h=0, col="coral3")
legend("topleft", legend, bty="n")
}
}
## OM
subdir = "OM"
load(file.path(maindir, subdir, paste("OM", 1, ".RData", sep="")))
om_biomass <- om_abundance <- om_ssb <- om_recruit <- om_Ftot <- om_Fmul <- om_landing <- om_survey <- matrix(NA, nrow=par.sim1$nyr, ncol=om_sim_num)
om_msy <- om_fmsy <- om_ssbmsy <- matrix(NA, nrow=1, ncol=om_sim_num)
om_fratio <- om_ssbratio <- matrix(NA, nrow=par.sim1$nyr, ncol=om_sim_num)
om_agecomp <- list()
om_landing_err <- om_survey_err <- matrix(NA, nrow=par.sim1$nyr, ncol=om_sim_num)
for(om_sim in 1:om_sim_num){
load(file.path(maindir, subdir, paste("OM", keep_sim_id[om_sim], ".RData", sep="")))
om_biomass[,om_sim] <- sim1$biomass.mt
om_abundance[,om_sim] <- sim1$abundance/1000
om_ssb[,om_sim] <- sim1$SSB
om_recruit[,om_sim] <- sim1$N.age[,1]/1000
om_Ftot[,om_sim] <- apply(sim1$FAA, 1, max)
om_Fmul[,om_sim] <- sim1$F
om_landing[,om_sim] <- sim1$L.mt
om_survey[,om_sim] <- survey.sim1
om_msy[, om_sim] <- sim1$msy$msy
om_fmsy[, om_sim] <- sim1$msy$Fmsy
om_ssbmsy[, om_sim] <- sim1$msy$SSBmsy
om_fratio[, om_sim] <- om_Ftot[, om_sim]/om_fmsy[om_sim]
om_ssbratio[, om_sim] <- om_ssb[, om_sim]/om_ssbmsy[om_sim]
om_agecomp[[om_sim]] <- apply(sim1$N.age/1000, 1, function(x) x/sum(x))
om_landing_err[,om_sim] <- dat.input$L.obs
om_survey_err[,om_sim] <- dat.input$survey.obs
}
om_list <- list(om_biomass, om_abundance, om_ssb, om_recruit, om_Ftot, om_landing, om_survey, om_msy, om_fmsy, om_ssbmsy, om_fratio, om_ssbratio, om_agecomp, om_landing_err, om_survey_err)
names(om_list) <- c("biomass", "abundance", "ssb", "recruit", "Ftot", "landing", "survey", "msy", "fmsy", "ssbmsy", "fratio", "ssbratio", "agecomp", "om_landing_err", "om_survey_err")
setwd("/Users/mattadmin/NetBeansProjects/mas/Tests/ModelComparisonProject/Stock-Assessment-Model-Comparison-Project")
#### Check and install missing packages and library all packages ####
list_of_packages <- c("rstudioapi", "gdata", "PBSadmb", "stringr", "matrixcalc", "r4ss", "ASAPplots", "future", "readxl", "scales", "corrplot", "future", "glue", "jsonlite")
missing_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(missing_packages)) install.packages(missing_packages)
invisible(lapply(list_of_packages, library, character.only = TRUE))
current_path <- getActiveDocumentContext()$path
maindir <- dirname(current_path)
setwd(maindir)
folder_names <- c("OM", "AMAK", "ASAP", "BAM", "MAS", "Figures", "Outputs")
om_sim_num <- 160
keep_sim_num <- 100
load(file.path(maindir, "seed_num.RData"))
seed_num <- seed_num[1:om_sim_num]
input.cv.L=0.01
input.cv.survey=0.2
cv.L=0.005
cv.survey=0.1
n.L=200
n.survey=200
logR.sd=0.2
nyr=30
#### Create main folders ####
sapply(folder_names, function(x) {
if (!file.exists(file.path(maindir, x))) dir.create(file.path(maindir, x))
})
#### Run Read_Write_Inputs_Fun ####
subdir = "Read_Write_Inputs_Fun"
setwd(file.path(maindir, subdir))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd(file.path(maindir, subdir, "r4ss"))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
#### Check convergence of iterations ####
if (T){
positive_hessian = matrix(NA, ncol=4, nrow=om_sim_num)
gradient_0.0001 = matrix(NA, ncol=4, nrow=om_sim_num)
gradient_0.001 = matrix(NA, ncol=4, nrow=om_sim_num)
gradient_0.01 = matrix(NA, ncol=4, nrow=om_sim_num)
gradient = matrix(NA, ncol=4, nrow=om_sim_num)
convergence_measures <- list(positive_hessian=positive_hessian, gradient_0.0001=gradient_0.0001, gradient_0.001=gradient_0.0001, gradient_0.01=gradient_0.0001, gradient=gradient)
for (om_sim in 1:om_sim_num){
subdir="AMAK"
setwd(file.path(maindir, subdir, paste("s", om_sim, sep="")))
temp <- getADMBHessian(File=file.path(maindir, subdir, paste("s", om_sim, sep="")), FileName="admodel.hes")$hes
convergence_measures$positive_hessian[om_sim, 1] <- ifelse(is.positive.definite((temp+t(temp))/2), 1, 0)
temp <- as.numeric(scan("amak.par", what='', n=16, quiet=TRUE)[c(6,11,16)])[3]
convergence_measures$gradient_0.0001[om_sim, 1]<- ifelse(temp>0.0001, 0, 1)
convergence_measures$gradient_0.001[om_sim, 1]<- ifelse(temp>0.001, 0, 1)
convergence_measures$gradient_0.01[om_sim, 1]<- ifelse(temp>0.01, 0, 1)
convergence_measures$gradient[om_sim, 1]<- temp
subdir="ASAP"
setwd(file.path(maindir, subdir, paste("s", om_sim, sep="")))
temp <- getADMBHessian(File=file.path(maindir, subdir, paste("s", om_sim, sep="")), FileName="admodel.hes")$hes
convergence_measures$positive_hessian[om_sim, 2] <- ifelse(is.positive.definite((temp+t(temp))/2), 1, 0)
temp <- as.numeric(scan("asap3.par", what='', n=16, quiet=TRUE)[c(6,11,16)])[3]
convergence_measures$gradient_0.0001[om_sim, 2]<- ifelse(temp>0.0001, 0, 1)
convergence_measures$gradient_0.001[om_sim, 2]<- ifelse(temp>0.001, 0, 1)
convergence_measures$gradient_0.01[om_sim, 2]<- ifelse(temp>0.01, 0, 1)
convergence_measures$gradient[om_sim, 2]<- temp
subdir="BAM"
setwd(file.path(maindir, subdir, paste("s", om_sim, sep="")))
temp <- getADMBHessian(File=file.path(maindir, subdir, paste("s", om_sim, sep="")), FileName="admodel.hes")$hes
convergence_measures$positive_hessian[om_sim, 3] <- ifelse(is.positive.definite((temp+t(temp))/2), 1, 0)
temp <- as.numeric(scan("bam-sim.par", what='', n=16, quiet=TRUE)[c(6,11,16)])[3]
convergence_measures$gradient_0.0001[om_sim, 3]<- ifelse(temp>0.0001, 0, 1)
convergence_measures$gradient_0.001[om_sim, 3]<- ifelse(temp>0.001, 0, 1)
convergence_measures$gradient_0.01[om_sim, 3]<- ifelse(temp>0.01, 0, 1)
convergence_measures$gradient[om_sim, 3]<- temp
subdir="BAM"
setwd(file.path(maindir, subdir, paste("s", om_sim, sep="")))
temp <- getADMBHessian(File=file.path(maindir, subdir, paste("s", om_sim, sep="")), FileName="admodel.hes")$hes #Hessian matrix
convergence_measures$positive_hessian[om_sim, 4] <- ifelse(is.positive.definite((temp+t(temp))/2), 1, 0)
temp <- as.numeric(scan("bam-sim.par", what='', n=16, quiet=TRUE)[c(6,11,16)])[3] #gradient value
convergence_measures$gradient_0.0001[om_sim, 4]<- ifelse(temp>0.0001, 0, 1)
convergence_measures$gradient_0.001[om_sim, 4]<- ifelse(temp>0.001, 0, 1)
convergence_measures$gradient_0.01[om_sim, 4]<- ifelse(temp>0.01, 0, 1)
convergence_measures$gradient[om_sim, 4]<- temp
}
save(convergence_measures, file=file.path(maindir, "Outputs", "convergence_measures.RData"))
load(file.path(maindir, "Outputs", "convergence_measures.RData"))
not_positive_hessian <- unique(unlist(sapply(1:ncol(convergence_measures$positive_hessian), function(x) which(convergence_measures$positive_hessian[,x]==0))))
write.csv(not_positive_hessian, file=file.path(maindir, "Outputs", "Not_positive_hessian.csv"))
col= c("black", "orange", "green", "red", "deepskyblue3")
if(max(convergence_measures$gradient)<0.1){
jpeg(file=file.path(maindir, "Figures", "Gradient.jpg"), width=170, height=150, units="mm", res=300)
par(mfrow=c(2,2), mar=c(4,4,1,1))
xlim = c(0, max(convergence_measures$gradient))
bins <- seq(0, max(convergence_measures$gradient)*1.05, by=0.0005)
hist(convergence_measures$gradient[,1], xlim=xlim, xlab = "Gradient", main="", col=col[2], breaks = bins)
legend("topright", "AMAK", bty="n")
box()
hist(convergence_measures$gradient[,2], xlim=xlim, xlab = "Gradient", main="", breaks = bins, col=col[3])
legend("topright", "ASAP", bty="n")
box()
hist(convergence_measures$gradient[,3], xlim=xlim, xlab = "Gradient", main="", breaks = bins, col=col[4])
legend("topright", "BAM", bty="n")
box()
hist(convergence_measures$gradient[,4], xlim=xlim, xlab = "Gradient", main="", breaks = bins, col=col[5])
legend("topright", "MAS", bty="n")
box()
dev.off()
}
good_gradient_percentage <- matrix(NA, nrow=1, ncol=4)
good_gradient_percentage[,1] <- length(which(convergence_measures$gradient[,1]<=0.001))/om_sim_num*100
good_gradient_percentage[,2] <- length(which(convergence_measures$gradient[,2]<=0.001))/om_sim_num*100
good_gradient_percentage[,3] <- length(which(convergence_measures$gradient[,3]<=0.001))/om_sim_num*100
good_gradient_percentage[,4] <- length(which(convergence_measures$gradient[,4]<=0.001))/om_sim_num*100
colnames(good_gradient_percentage) <- c("AMAK", "ASAP", "BAM", "MAS")
rownames(good_gradient_percentage) <- "Percentage"
write.csv(good_gradient_percentage, file=file.path(maindir, "Outputs", "good_gradient_ratio.csv"))
keep_sim_id <- c(1:om_sim_num)[-unique(c(which(convergence_measures$gradient[,1] %in% boxplot.stats(convergence_measures$gradient[,1])$out), which(convergence_measures$gradient[,2] %in% boxplot.stats(convergence_measures$gradient[,2])$out), which(convergence_measures$gradient[,3] %in% boxplot.stats(convergence_measures$gradient[,3])$out), which(convergence_measures$gradient[,4] %in% boxplot.stats(convergence_measures$gradient[,4])$out), unique(unlist(sapply(1:ncol(convergence_measures$positive_hessian), function(x) which(convergence_measures$positive_hessian[,x]==0))))))][1:keep_sim_num]
om_sim_num <- length(keep_sim_id)
}
#### Check and install missing packages and library all packages ####
list_of_packages <- c("X11", "rstudioapi", "gdata", "PBSadmb", "stringr", "matrixcalc", "r4ss", "ASAPplots", "future", "readxl", "scales", "corrplot", "future", "glue", "jsonlite")
missing_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(missing_packages)) install.packages(missing_packages)
invisible(lapply(list_of_packages, library, character.only = TRUE))
#### Check and install missing packages and library all packages ####
list_of_packages <- c("XQuartz", "rstudioapi", "gdata", "PBSadmb", "stringr", "matrixcalc", "r4ss", "ASAPplots", "future", "readxl", "scales", "corrplot", "future", "glue", "jsonlite")
missing_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(missing_packages)) install.packages(missing_packages)
invisible(lapply(list_of_packages, library, character.only = TRUE))
